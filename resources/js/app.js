"use strict";
let app = angular.module("Keynote",["ui.bootstrap"]);

app.controller("KeynoteController",function($scope){
    var self = $scope;

    self.file = {
        title: "Untitled",
        width: 800,
        height: 500,
        slides: [
            {
                name: "Slide1",
                components: [
                    {
                        type: "text",
                        name: "Title",
                        style: "title",
                        content: "Presentation title",
                        x: 150,
                        y: 8,
                        width: 500,
                        height: 42
                    },
                    {
                        type: "text",
                        name: "Subtitle",
                        content: "Authors",
                        x: 200,
                        y: 64,
                        width: 400,
                        height: 42
                    }
                ]
            },
            {
                name: "Slide2",
                components: [
                    {
                        type: "text",
                        name: "Content",
                        content: "Esta presentacion trata sobre la teoria DS",
                        x: 200,
                        y: 64,
                        width: 400,
                        height: 42
                    }
                ]
            }
        ],
        styles: [
            {
                name: "title",
                def: {
                    "font-size": "48px"
                }
            },
            {
                name: "redblack",
                def: {
                    "color": "red",
                    "background": "black"
                }
            }
        ],
        templates: []
    };

    self.bcmp = [];
    self.presenting = false;
    self.pyStatus = 0;

    self.currentSlide = 0;
    self.currentComp = 0;

    self.icons = {
        "text": "gpx/icboxtext.png",
        "py": "gpx/icboxpy.png",
        "img": "gpx/icboximg.png",
        "shp": "gpx/icboxshape.png",
        "table": "gpx/icboxtable.png"
    };

    //                  exec free, busy exec, input wait, error
    self.statusColor = ["#999999", "#c2b845", "#3276f4", "#ff543d"];

    self.selectComp = (i) => {
        self.currentComp = i;
    };

    self.selectSlide = (i) => {
        self.currentSlide = i;
        self.currentComp = 0;
    };

    self.addSlide = () => {
        self.file.slides.push({
            name: ("Slide"+self.file.slides.length),
            components: [
                {
                    type: "text",
                    name: "Label0",
                    content: "Autogenerated",
                    x: 200,
                    y: 64,
                    width: 400,
                    height: 42
                }
            ]
        });
    };

    self.getContent = (content, type) => {
        self.highlightCode();
        if(type == "text")
            return content;
        if(type == "py")
            return "<pre class='pybox'><code class='python'>" + content + "</code></pre>";
        if(type == "img")
            return "<img class='pres-img' src='"+content+"'>";
    };

    self.openShellCont = (cmp) => {
        console.log(cmp);
    };

    self.openShell = (script) => {
        var encscript = encodeURIComponent(script);
        window.open(window.location.href+"shell?script="+encscript,"","width=800px,height=600px,left=283px,top=50px");
    };

    self.setFullScreen = () => {
        angular.element("#slide-viewer")[0].webkitRequestFullScreen();
        self.presenting = true;
    };


    self.stopFullScreen = () => {
        if(document.webkitIsFullScreen == false){
            self.presenting = false;
            self.$apply();
        }
    };

    document.addEventListener('webkitfullscreenchange', self.stopFullScreen, false);

    //Boxes
    self.addTextBox = () => {
        let def = {
            type: "text",
            name: ("Label"+self.file.slides[self.currentSlide].components.length),
            content: "Autogenerated",
            x: 200,
            y: 150,
            width: 400,
            height: 42
        };
        self.file.slides[self.currentSlide].components.push(def);
        self.currentComp = self.file.slides[self.currentSlide].components.length-1;
    };

    self.addPyBox = () => {
        let def = {
            type: "py",
            name: ("Code"+self.file.slides[self.currentSlide].components.length),
            content: "#Write your code",
            x: 200,
            y: 250,
            width: 300,
            height: 100
        };
        self.file.slides[self.currentSlide].components.push(def);
        self.currentComp = self.file.slides[self.currentSlide].components.length-1;
    };

    self.addImgBox = () => {
        let def = {
            type: "img",
            name: ("Image"+self.file.slides[self.currentSlide].components.length),
            content: "img/sample.png",
            x: 200,
            y: 250,
            width: 250,
            height: 250
        };
        self.file.slides[self.currentSlide].components.push(def);
        self.currentComp = self.file.slides[self.currentSlide].components.length-1;
    };

    //Actions
    self.downloadPresentation = () => {
        download(self.file.title+".kpjson",angular.toJson(self.file));
    };

    self.deleteComp = () => {
        self.file.slides[self.currentSlide].components.splice(self.currentComp,1);
        self.currentComp = 0;
    };

    self.constructStyle = () => {
        var builder = "";
        for(var i=0; i<self.file.styles.length; i++){
            let st = self.file.styles[i];
            builder += " ."+st.name+"{";
            for(var prop in st.def){
                builder += " "+prop+":"+st.def[prop]+";";
            }
            builder += "}";
        }
        return builder;
    };

    self.highlightCode = () => {
        $('pre code').each(function(i, block) {
            hljs.highlightBlock(block);
        });
        $(".pybox").off();
        $(".pybox").click((e) => {
            self.openShell($(e.target).text());
        });
    };

});

app.filter("sanitize", ['$sce', function($sce) {
    return function(htmlCode){
        return $sce.trustAsHtml(htmlCode);
    };
}]);

//Static util functions
let download = (filename, text) => {
    let element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
};